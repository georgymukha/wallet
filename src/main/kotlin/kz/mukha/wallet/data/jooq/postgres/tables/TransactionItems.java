/*
 * This file is generated by jOOQ.
 */
package kz.mukha.wallet.data.jooq.postgres.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import kz.mukha.wallet.data.jooq.postgres.Keys;
import kz.mukha.wallet.data.jooq.postgres.Wallet;
import kz.mukha.wallet.data.jooq.postgres.tables.Transactions.TransactionsPath;
import kz.mukha.wallet.data.jooq.postgres.tables.records.TransactionItemsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionItems extends TableImpl<TransactionItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wallet.transaction_items</code>
     */
    public static final TransactionItems TRANSACTION_ITEMS = new TransactionItems();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionItemsRecord> getRecordType() {
        return TransactionItemsRecord.class;
    }

    /**
     * The column <code>wallet.transaction_items.transaction_item_id</code>.
     */
    public final TableField<TransactionItemsRecord, UUID> TRANSACTION_ITEM_ID = createField(DSL.name("transaction_item_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.transaction_id</code>.
     */
    public final TableField<TransactionItemsRecord, UUID> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.commodity_sum</code>.
     */
    public final TableField<TransactionItemsRecord, BigDecimal> COMMODITY_SUM = createField(DSL.name("commodity_sum"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.quantity</code>.
     */
    public final TableField<TransactionItemsRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.price</code>.
     */
    public final TableField<TransactionItemsRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 3).nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.item_name</code>.
     */
    public final TableField<TransactionItemsRecord, String> ITEM_NAME = createField(DSL.name("item_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>wallet.transaction_items.created_at</code>.
     */
    public final TableField<TransactionItemsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>wallet.transaction_items.updated_at</code>.
     */
    public final TableField<TransactionItemsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>wallet.transaction_items.item_type</code>.
     */
    public final TableField<TransactionItemsRecord, String> ITEM_TYPE = createField(DSL.name("item_type"), SQLDataType.VARCHAR(63).nullable(false).defaultValue(DSL.field(DSL.raw("'ITEM_TYPE_COMMODITY'::character varying"), SQLDataType.VARCHAR)), this, "");

    private TransactionItems(Name alias, Table<TransactionItemsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionItems(Name alias, Table<TransactionItemsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>wallet.transaction_items</code> table reference
     */
    public TransactionItems(String alias) {
        this(DSL.name(alias), TRANSACTION_ITEMS);
    }

    /**
     * Create an aliased <code>wallet.transaction_items</code> table reference
     */
    public TransactionItems(Name alias) {
        this(alias, TRANSACTION_ITEMS);
    }

    /**
     * Create a <code>wallet.transaction_items</code> table reference
     */
    public TransactionItems() {
        this(DSL.name("transaction_items"), null);
    }

    public <O extends Record> TransactionItems(Table<O> path, ForeignKey<O, TransactionItemsRecord> childPath, InverseForeignKey<O, TransactionItemsRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION_ITEMS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionItemsPath extends TransactionItems implements Path<TransactionItemsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionItemsPath(Table<O> path, ForeignKey<O, TransactionItemsRecord> childPath, InverseForeignKey<O, TransactionItemsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionItemsPath(Name alias, Table<TransactionItemsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionItemsPath as(String alias) {
            return new TransactionItemsPath(DSL.name(alias), this);
        }

        @Override
        public TransactionItemsPath as(Name alias) {
            return new TransactionItemsPath(alias, this);
        }

        @Override
        public TransactionItemsPath as(Table<?> alias) {
            return new TransactionItemsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wallet.WALLET;
    }

    @Override
    public UniqueKey<TransactionItemsRecord> getPrimaryKey() {
        return Keys.TRANSACTION_ITEMS_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionItemsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_ITEMS__TRANSACTION_ITEMS_TRANSACTION_ID_FKEY);
    }

    private transient TransactionsPath _transactions;

    /**
     * Get the implicit join path to the <code>wallet.transactions</code> table.
     */
    public TransactionsPath transactions() {
        if (_transactions == null)
            _transactions = new TransactionsPath(this, Keys.TRANSACTION_ITEMS__TRANSACTION_ITEMS_TRANSACTION_ID_FKEY, null);

        return _transactions;
    }

    @Override
    public TransactionItems as(String alias) {
        return new TransactionItems(DSL.name(alias), this);
    }

    @Override
    public TransactionItems as(Name alias) {
        return new TransactionItems(alias, this);
    }

    @Override
    public TransactionItems as(Table<?> alias) {
        return new TransactionItems(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionItems rename(String name) {
        return new TransactionItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionItems rename(Name name) {
        return new TransactionItems(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionItems rename(Table<?> name) {
        return new TransactionItems(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems where(Condition condition) {
        return new TransactionItems(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionItems where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionItems where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionItems where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionItems where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionItems whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
