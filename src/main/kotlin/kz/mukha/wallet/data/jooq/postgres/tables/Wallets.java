/*
 * This file is generated by jOOQ.
 */
package kz.mukha.wallet.data.jooq.postgres.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import kz.mukha.wallet.data.jooq.postgres.Keys;
import kz.mukha.wallet.data.jooq.postgres.Wallet;
import kz.mukha.wallet.data.jooq.postgres.tables.Transactions.TransactionsPath;
import kz.mukha.wallet.data.jooq.postgres.tables.UserWalletPermissions.UserWalletPermissionsPath;
import kz.mukha.wallet.data.jooq.postgres.tables.Users.UsersPath;
import kz.mukha.wallet.data.jooq.postgres.tables.records.WalletsRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Wallets extends TableImpl<WalletsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>wallet.wallets</code>
     */
    public static final Wallets WALLETS = new Wallets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletsRecord> getRecordType() {
        return WalletsRecord.class;
    }

    /**
     * The column <code>wallet.wallets.wallet_id</code>.
     */
    public final TableField<WalletsRecord, UUID> WALLET_ID = createField(DSL.name("wallet_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>wallet.wallets.owner_id</code>.
     */
    public final TableField<WalletsRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>wallet.wallets.wallet_name</code>.
     */
    public final TableField<WalletsRecord, String> WALLET_NAME = createField(DSL.name("wallet_name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>wallet.wallets.currency</code>.
     */
    public final TableField<WalletsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false).defaultValue(DSL.field(DSL.raw("'398'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>wallet.wallets.created_at</code>.
     */
    public final TableField<WalletsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>wallet.wallets.updated_at</code>.
     */
    public final TableField<WalletsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>wallet.wallets.save_items</code>.
     */
    public final TableField<WalletsRecord, Boolean> SAVE_ITEMS = createField(DSL.name("save_items"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private Wallets(Name alias, Table<WalletsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Wallets(Name alias, Table<WalletsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>wallet.wallets</code> table reference
     */
    public Wallets(String alias) {
        this(DSL.name(alias), WALLETS);
    }

    /**
     * Create an aliased <code>wallet.wallets</code> table reference
     */
    public Wallets(Name alias) {
        this(alias, WALLETS);
    }

    /**
     * Create a <code>wallet.wallets</code> table reference
     */
    public Wallets() {
        this(DSL.name("wallets"), null);
    }

    public <O extends Record> Wallets(Table<O> path, ForeignKey<O, WalletsRecord> childPath, InverseForeignKey<O, WalletsRecord> parentPath) {
        super(path, childPath, parentPath, WALLETS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WalletsPath extends Wallets implements Path<WalletsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WalletsPath(Table<O> path, ForeignKey<O, WalletsRecord> childPath, InverseForeignKey<O, WalletsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WalletsPath(Name alias, Table<WalletsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WalletsPath as(String alias) {
            return new WalletsPath(DSL.name(alias), this);
        }

        @Override
        public WalletsPath as(Name alias) {
            return new WalletsPath(alias, this);
        }

        @Override
        public WalletsPath as(Table<?> alias) {
            return new WalletsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Wallet.WALLET;
    }

    @Override
    public UniqueKey<WalletsRecord> getPrimaryKey() {
        return Keys.WALLETS_PKEY;
    }

    @Override
    public List<ForeignKey<WalletsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WALLETS__WALLETS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>wallet.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.WALLETS__WALLETS_USER_ID_FKEY, null);

        return _users;
    }

    private transient TransactionsPath _transactions;

    /**
     * Get the implicit to-many join path to the
     * <code>wallet.transactions</code> table
     */
    public TransactionsPath transactions() {
        if (_transactions == null)
            _transactions = new TransactionsPath(this, null, Keys.TRANSACTIONS__TRANSACTIONS_WALLET_ID_FKEY.getInverseKey());

        return _transactions;
    }

    private transient UserWalletPermissionsPath _userWalletPermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>wallet.user_wallet_permissions</code> table
     */
    public UserWalletPermissionsPath userWalletPermissions() {
        if (_userWalletPermissions == null)
            _userWalletPermissions = new UserWalletPermissionsPath(this, null, Keys.USER_WALLET_PERMISSIONS__USER_WALLET_PERMISSIONS_WALLET_ID_FKEY.getInverseKey());

        return _userWalletPermissions;
    }

    @Override
    public Wallets as(String alias) {
        return new Wallets(DSL.name(alias), this);
    }

    @Override
    public Wallets as(Name alias) {
        return new Wallets(alias, this);
    }

    @Override
    public Wallets as(Table<?> alias) {
        return new Wallets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(String name) {
        return new Wallets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(Name name) {
        return new Wallets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(Table<?> name) {
        return new Wallets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Condition condition) {
        return new Wallets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
