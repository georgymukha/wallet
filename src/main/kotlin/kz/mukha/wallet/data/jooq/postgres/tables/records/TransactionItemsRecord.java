/*
 * This file is generated by jOOQ.
 */
package kz.mukha.wallet.data.jooq.postgres.tables.records;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import kz.mukha.wallet.data.jooq.postgres.tables.TransactionItems;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionItemsRecord extends UpdatableRecordImpl<TransactionItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>wallet.transaction_items.transaction_item_id</code>.
     */
    public void setTransactionItemId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.transaction_item_id</code>.
     */
    public UUID getTransactionItemId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>wallet.transaction_items.transaction_id</code>.
     */
    public void setTransactionId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.transaction_id</code>.
     */
    public UUID getTransactionId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>wallet.transaction_items.commodity_sum</code>.
     */
    public void setCommoditySum(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.commodity_sum</code>.
     */
    public BigDecimal getCommoditySum() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>wallet.transaction_items.quantity</code>.
     */
    public void setQuantity(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.quantity</code>.
     */
    public BigDecimal getQuantity() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>wallet.transaction_items.price</code>.
     */
    public void setPrice(BigDecimal value) {
        set(4, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.price</code>.
     */
    public BigDecimal getPrice() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>wallet.transaction_items.item_name</code>.
     */
    public void setItemName(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.item_name</code>.
     */
    public String getItemName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>wallet.transaction_items.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>wallet.transaction_items.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>wallet.transaction_items.item_type</code>.
     */
    public void setItemType(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>wallet.transaction_items.item_type</code>.
     */
    public String getItemType() {
        return (String) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionItemsRecord
     */
    public TransactionItemsRecord() {
        super(TransactionItems.TRANSACTION_ITEMS);
    }

    /**
     * Create a detached, initialised TransactionItemsRecord
     */
    public TransactionItemsRecord(UUID transactionItemId, UUID transactionId, BigDecimal commoditySum, BigDecimal quantity, BigDecimal price, String itemName, LocalDateTime createdAt, LocalDateTime updatedAt, String itemType) {
        super(TransactionItems.TRANSACTION_ITEMS);

        setTransactionItemId(transactionItemId);
        setTransactionId(transactionId);
        setCommoditySum(commoditySum);
        setQuantity(quantity);
        setPrice(price);
        setItemName(itemName);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setItemType(itemType);
        resetChangedOnNotNull();
    }
}
